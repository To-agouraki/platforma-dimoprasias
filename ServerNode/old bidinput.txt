const bidItem = async (req, res, next) => {
  const { amount, itemId, userId } = req.body;
  let bid;

  if (amount <= 0) {
    return next(new HttpError("Please place a bid with a positive amount", 500));
  }

  try {
    // Find the existing highest bid for the same item by the current bidder
    const existingBid = await BidJunctionTable.findOne({
      place: itemId,
      bidder: userId,
    }).sort({ amount: -1 });

    if (existingBid) {
      // If existing bid is found, checkaro if the new bid amount is greater
      if (amount > existingBid.amount) {
        // Update the existing bid with the new amount
        existingBid.amount = amount;
        await existingBid.save();
        bid = existingBid; // Assign the existing bid to the
      } else {
        return res.status(400).json({
          message:
            "The bid amount must be greater than the existing highest bid.",
        });
      }
    } else {
      // Create a new bid
      bid = new BidJunctionTable({
        amount,
        place: itemId,
        bidder: userId,
      });

      // Save the new bid to the database
      await bid.save();

      // Update the user's bids field only when a new bid is created
      await User.findByIdAndUpdate(
        userId,
        { $push: { bids: bid._id } },
        { new: true }
      );

      await Place.findByIdAndUpdate(
        userId,
        { $push: { bids: bid._id } },
        { new: true }
      );
    }

    // Find the existing highest bid for the item
    const existingHighestBid = await BidJunctionTable.findOne({ place: itemId })
      .sort({ amount: -1 })
      .exec();

    let highestBid = existingHighestBid ? existingHighestBid.amount : 0;
    let highestBidder = existingHighestBid ? existingHighestBid.bidder : null;

    if (amount > highestBid) {
      highestBid = amount;
      highestBidder = userId;
    }

    // Update the place's highest bid and bidder fields
    try {
      await Place.findByIdAndUpdate(
        itemId,
        { highestBid, highestBidder },
        { new: true }
      );
    } catch (error) {
      console.log(error);
    }

    res.status(201).json({ message: "Bid created successfully", bid });
  } catch (error) {
    console.log(error);
    return next(new HttpError("Creating bid failed, please try again", 500));
  }
};